const typeDefs = `
# type Comment {
#   id: Int!,
#   body: String!,
#   postId: Int,
#   authorId: Int,
#   archived: Boolean
# }
#
# type Post {
#   id: Int!,
#   body: String!,
#   authorId: Int,
#   numComments: Int!,
#   comments: [Comment]
# }
#
# type User {
#   id: Int!,
#   email: String!,
#   fullName: String!,
#   favNums: [Int],
#   posts: [Post]
# }



# union Unit = SimpleUnit | CombinedCycleComponent | JointlyOwnedUnit
# union LogicalUnit = SimpleLogicalUnit | CombinedCycleTrain | JointlyOwnedComponent
# interface Unit {
#   name: String!
#   station: Station!
#   node: Node!
#   bus: Bus!
#   kvNom: Float!
#   isJointlyOwned: Boolean!
#   isCombinedCycleComponent: Boolean!
#   isPUN: Boolean!
#   ratedMW: Int!
#   DCurve: DCurve
#   logicalUnits: [LogicalUnit]!
#   unitType: UnitType!
#   gsu: [Xfmr!]!
#   QSE: QSE
#   RE: RE
# }
scalar HABKey
type NETMOMUnit {
  id: ID!
  key: HABKey!
  name: String!
  isPUN: Boolean!
  ratedMW: Int!

  station: NETMOMStation!
  dv: NETMOMDV!
  weatherZone: NETMOMWthrZn!
  type: HABUnitType!
  node: NETMOMNode!
  bus: NETMOMBus!
  kvGroup: NETMOMKVGroup!
  DCurve: NETMOMTable
  logicalUnits: [NETMOMLogicalUnit]!
  RE: NETMOMOwn!
}
type NETMOMLogicalUnit {
  id: ID!
  key: HABKey!
  name: String!
  isCombinedCycle: Boolean!

  station: NETMOMStation!
  dv: NETMOMDV!
  units: [NETMOMUnit]!
  combinedCycleConfigs: [NETMOMCombinedCycleConfig]
}
type GENMOMUnit {
  id: ID!
  key: HABKey!
  name: String!
  logicalUnits: [GENMOMLogicalUnit]!
  type: HABUnitType!
}
type GENMOMLogicalUnit {
  id: ID!
  key: HABKey!
  name: String!
  units: GENMOMUnit!
  type: HABUnitType!
  QSE: GENMOMQSE!
}
enum HABUnitType {
  GT
  NUCL
  COGN
  FOSS
  STM
  PVGR
  HYDR
  WIND
  COAL
  NUG
  JOU
}
type GENMOMQSE {
  id: ID!
  key: HABKey!
  name: String!
  longName: String!
  logicalUnits: [GENMOMLogicalUnit]
}
type NETMOMOwn {
  id: ID!
  key: HABKey!
  name: String!
  longName: String!
  units: [NETMOMUnit]
}
type NETMOMXfmr {
  id: ID!
  key: HABKey!
  name: String!
  xfs: [NETMOMXfs]!
}
type NETMOMXf {
  id: ID!
  key: HABKey!
  name: String!
  isPUN: Boolean!
  akVNom: Float!
  bkVNom: Float!
  station: NETMOMStation!
  dv: NETMOMDV!
  aNode: NETMOMNode!
  bNode: NETMOMNode!
  aBus: NETMOMBus
  bBus: NETMOMBus
  owner: NETMOMOwn!
  aXf2: NETMOMXf2!
  bXf2: NETMOMXf2!
  xmfr: NETMOMXfmr!
}
type NETMOMXf2 {
  id: ID!
  key: HABKey!
  name: String!
  station: NETMOMStation!
  dv: NETMOMDV!
  node: NETMOMNode!
  bus: NETMOMBus!
  kvGroup: NETMOMKVGroup!
  xf: NETMOMXf!
}
type NETMOMKVGroup {
  id: ID!
  key: HABKey!
  kV: Float!
  station: NETMOMStation!
  units: [NETMOMUnit]
  xf2s: [NETMOMXf2]
  nodes: [NETMOMNode]!
  buses: [NETMOMBus]
  voltageLevel: NETMOMVoltageLevel!
}
type NETMOMVoltageLevel {
  id: ID!
  key: HABKey!
  name: String!
  kV: Float!
}
type NETMOMStation {
  id: ID!
  key: HABKey!
  acronym: String!
  name: String!
  units: [NETMOMUnit]
  xfs: [NETMOMXf]
  nodes: [NETMOMNode]!
  buses: [NETMOMBus]
}
type NETMOMDV {
  id: ID!
  key: HABKey!
  name: NETMOMDVName!
}
enum NETMOMDVName {
  COAS
  EAST
  FWES
  NCEN
  NOTH
  SCEN
  SOUT
  WEST
}
type NETMOMWthrZn {
  id: ID!
  key: HABKey!
  name: NETMOMWthrZnName!
}
enum NETMOMWthrZnName {
  WXZCOAST
  WXZSTHC
  WXZWEST
  WXZEAST
  WXZNRTHC
  WXZFWEST
  WXZSTHRN
  WXZNORTH
}
type NETMOMPUN {
  id: ID!
  key: HABKey!
  name: String!
  loadZone: NETMOMLdArea!
}
type NETMOMLdArea {
  id: ID!
  key: HABKey!
  name: String!
}
type NETMOMNode {
  id: ID!
  key: HABKey!
  station: NETMOMStation!
  bus: NETMOMBus
  units: [NETMOMUnit]
  xfs: [NETMOMXf]
}
type NETMOMBus {
  id: ID!
  key: HABKey!
  station: NETMOMStation!
  nodes: [NETMOMNode]!
  dead: Boolean!
  units: [NETMOMUnit]
  xfs: [NETMOMXf]
}
type NETMOMDCurve {
  id: ID!
  key: HABKey!
  units: [NETMOMUnit]!
}
type NETMOMCombinedCycleConfig {
  id: ID!
  key: HABKey!
  name: String!
  logicalUnit: NETMOMLogicalUnit!
  configNumber: Int!
}
enum NETMOMTableTypeName {
  AUXVLIM
  AUXWR
  UNRMNRMX
  PSIMP
  XFTAP
  XFIMP
  LDVOLTSK
}
type NETMOMTableType {
  id: ID!
  key: HABKey!
  type: NETMOMTableTypeName!
  description: String!
  tables: [NETMOMTable]
}

type NETMOMTable {
  id: ID!
  key: HABKey!
  name: String!
  type: NETMOMTableType!
  rows: [NETMOMTableRow]
}
type NETMOMTableRow {
  id: ID!
  key: HABKey!
  rowNumber: Int!
  value: Float!
  table: NETMOMTable!
  tableValues: [NETMOMTableValue]
}
type NETMOMTableValue {
  id: ID!
  key: HABKey!
  rowNumber: Int!
  value1: Float!
  value2: Float!
  tableRow: NETMOMTableRow!
}
# type WindUnit implements Unit {
#   name: String!
#   station: Station!
#   node: Node!
#   bus: Bus!
#   kvNom: Float!
#   isJointlyOwned: Boolean!
#   isCombinedCycleComponent: Boolean!
#   isPUN: Boolean!
#   ratedMW: Int!
#   logicalUnits: [LogicalUnit]!
#   unitType: UnitType!
#   gsu: [Xfmr]!
#   numTurbines: Int!
#   turbineType: WindTurbineType!
# }
#
# enum WindTurbineType {
#   TYPE1
#   TYPE2
#   TYPE3
#   TYPE4
# }
# type LogicalUnit {
#   name: String!
#   station: String!
#   Units: [Unit]!
#   isJointlyOwnedComponent: Boolean!
#   isCombinedCycle: Boolean!
#   unitType: UnitType!
#   combinedCycleUnit: CombinedCycleUnit
# }
#
# type CombinedCycleUnit {
#   configurations: [CombinedCycleConfiguration]
#   activeConfiguration: timeVariant
# }
#
# type CombinedCycleConfiguration {
#   name: String!
#   logicalUnit: LogicalUnit!
#   subsets: [CCSubset!]!
#   transitionTos: [CombinedCycleConfiguration]
# }
#
# type CombinedCycleSubset {
#   onlineCount: Int!
#   primaryUnits: [Unit!]!
#   alternateUnits: [Unit]
# }
# input timeWindow {
#   tMin: inputTime
#   tMax: inputTime
# }
# input inputTime
# type timeVariant {
#
# }
# type Station {
#   name: String!
#   acronym: String!
#   zone: Zone!
#   latitude: Latitude!
#   longitude: Longitude!
#   county: County!
#   units: [Unit]
#   lines: [Line]
#   xfmrs: [Xfmr]
#
# }

type Query {
  user(id: Int!): User
}
`

export default typeDefs;
