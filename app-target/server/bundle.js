!function(t){function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}var e={};n.m=t,n.c=e,n.i=function(t){return t},n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:r})},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},n.p="/Users/Beau/Documents/Work/HTML/Java/hello-angular2-universal-j2v8",n(n.s=10)}([function(t,n){t.exports=require("body-parser")},function(t,n){t.exports=require("express")},function(t,n){t.exports=require("graphiql")},function(t,n){t.exports=require("graphql-server-express")},function(t,n){t.exports=require("graphql-tools")},function(t,n){t.exports=require("isomorphic-fetch")},function(t,n){t.exports=require("morgan")},function(t,n){t.exports=require("path")},function(t,n){t.exports=require("react")},function(t,n){t.exports=require("react-dom")},function(t,n,e){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function o(t,n,e,r){console.error(t.stack),r(t)}var u=e(1),s=r(u),i=e(6),a=r(i),p=e(0),c=r(p),l=e(3),f=e(4),h=e(8),d=(r(h),e(9)),g=(r(d),e(5)),y=(r(g),e(2)),q=(r(y),e(7)),m=(r(q),{Query:{posts:function(t){function n(){return t.apply(this,arguments)}return n.toString=function(){return t.toString()},n}(function(){return posts})},Mutation:{upvotePost:function(t,n){var e=n.postId,r=find(posts,{id:e});if(!r)throw new Error("Couldn't find post with id "+e);return r.votes+=1,r}},Author:{posts:function(t){function n(n){return t.apply(this,arguments)}return n.toString=function(){return t.toString()},n}(function(t){return filter(posts,{authorId:t.id})})},Post:{author:function(t){return find(authors,{id:t.authorId})}}}),x=(0,f.makeExecutableSchema)({typeDefs:"\ntype Author {\n  id: ID! # the ! means that every author object _must_ have an id\n  firstName: String\n  lastName: String\n  posts: [Post] # the list of Posts by this author\n}\n\ntype Post {\n  id: ID!\n  title: String\n  author: Author\n  votes: Int\n}\n\n# the schema allows the following query:\ntype Query {\n  posts: [Post]\n}\n\n# this schema allows the following mutation:\ntype Mutation {\n  upvotePost (\n    postId: ID!\n  ): Post\n}\n\n# we need to tell the server which types represent the root query\n# and root mutation types. We call them RootQuery and RootMutation by convention.\nschema {\n  query: Query\n  mutation: Mutation\n}\n",resolvers:m});console.log("NODE_ENV: production");var v=(0,s.default)();v.use((0,a.default)("combined")),v.use("/graphql",c.default.json(),(0,l.graphqlExpress)({schema:x})),v.use("/graphiql",(0,l.graphiqlExpress)({endpointURL:"/graphql"})),v.use(o),v.listen(4e3,function(){return console.log("Now browse to localhost:4000/graphiql")})}]);